import ipywidgets as widgets
from IPython.display import display, clear_output
from IPython.display import display, HTML
import datetime


dashboard_title = widgets.HTML(value="<h1 style='color: green; text-align: left;'>Vysetliteľnosť modelu pre predikciu indexu DST</h1>")

sequences = []
for x, y in test_generator:
    sequences.extend(x)
    
# prediction
y_pred = model.predict(test_generator)
    
style = {'description_width': 'initial'} 


start_date_widget = widgets.DatePicker(
    description='Zvoľ si dátum sledovania:',
    disabled=False,
    style=style,
    value=datetime.date(2010, 6, 29),
    min=datetime.date(2010, 6, 29),
    max=datetime.date(2022, 5, 14)
)
hours_to_watch_widget = widgets.IntSlider(value=12, min=0, max=24, step=1, description='Koľko hodin chceš sledovať:',style=style)
interval_length_widget = widgets.RadioButtons(options=[1, 2, 3],description='Výber dĺžky perturbovaného intervalu:',value=2,disabled=False, style=style)
index_widget = widgets.IntSlider(value=12,description='Výber konkrétnej hodiny počas dňa:', continuous_update=False,min=0,max=24, style=style)        


generate_button1 = widgets.Button(description='Generovať graf', button_style='success')
generate_button2 = widgets.Button(description='Generovať graf', button_style='success')

output_container1 = widgets.Output()
output_container2 = widgets.Output()

def on_generate_button_clicked1(b):
    
    selected_date = start_date_widget.value
    start_index = (selected_date - datetime.date(2010, 6, 29)).days    
    start_index = max(0, start_index) 
    index = index_widget.value
    interval_length = interval_length_widget.value
    hours_to_watch = hours_to_watch_widget.value
    
    if start_index == 0:
        start_index = start_index*24
        fig1 = XAI_for_DST_Prediction_with_predicted_value_for_dashboard(sequences[start_index+index-11],0, model, interval_length, value_for_shutdown,index)
        fig1.suptitle('Vybrané časové okno s predikovanou hodnotou',fontsize = 24)
        fig2 = XAI_for_DST_Prediction_with_predicted_value_for_dashboard(sequences[start_index+index-11],sequences[start_index+index-11+1], model, interval_length, value_for_shutdown,index)
        fig2.suptitle('Vybrané časové okno so skutočnou hodnotou', fontsize = 24)
    else:
        start_index = (start_index*24)-11
        fig1 = XAI_for_DST_Prediction_with_predicted_value_for_dashboard(sequences[start_index+index],0, model, interval_length, value_for_shutdown,index)
        fig1.suptitle('Vybrané časové okno s predikovanou hodnotou', fontsize = 24)
        fig2 = XAI_for_DST_Prediction_with_predicted_value_for_dashboard(sequences[start_index+index],sequences[start_index+index+1], model, interval_length, value_for_shutdown,index)
        fig2.suptitle('Vybrané časové okno so skutočnou hodnotou', fontsize = 24)
    
    with output_container1:
        clear_output(wait=True)
        display(fig2)
        display(fig1)
        
def on_generate_button_clicked2(b):

    selected_date = start_date_widget.value
    start_index = (selected_date - datetime.date(2010, 6, 29)).days    
    start_index = max(0, start_index) 
    hours_to_watch = hours_to_watch_widget.value
    last_elements = []
    elements = []
    start_index2 = 0
    start_index1 = 0
    hours_to_watch1 = hours_to_watch
    hours_to_watch2 = hours_to_watch
    
    if start_index == 0:
        hours_to_watch1 = 14
        start_index1 = 1
    elif start_index == 4336:
        start_index1 = (start_index*24)-10
        hours_to_watch1 = 16
    else:
        start_index1 = (start_index*24)-10
    
    for i in range(start_index1,start_index1+hours_to_watch1):
        last_elements.append(sequences[i][-1])

    fig3 = plt.figure(figsize=(26, 3))
    if start_index == 0:
        plt.plot(range(11, 11 + len(last_elements)), last_elements, marker='o', c='green')
        plt.xticks(range(11, 11 + hours_to_watch1))
    else:
        plt.plot(last_elements, marker='o', c='green')
        plt.xticks(range(hours_to_watch1)) 
        
    plt.title('Skutošné hodnoty DST na ' + str(hours_to_watch1) + "-hodinovom okne",fontsize=25)
    plt.xlabel("Časový priebeh (h)",fontsize=20)
    plt.ylabel("DST", fontsize=20)
    plt.tick_params(axis='x', labelsize=20)
    plt.grid(which='major', linestyle=':', color='black', linewidth='0.5')
    plt.grid(which='major', linestyle=':', color='black', linewidth='0.5')
    
    
    if start_index == 0:
        start_index2 = 0
        hours_to_watch2 = 14
    elif start_index == 4336:
        start_index2 = (start_index*24)-11
        hours_to_watch2 = 17
    else:
        start_index2 = (start_index*24)-11
    
    for i in range(start_index2,start_index2+hours_to_watch2):
        elements.append(y_pred[i])
    
    fig4 = plt.figure(figsize=(26, 3))
    if start_index == 0:
        plt.plot(range(11, 11 + len(elements)), elements, marker='o', c='green')
        plt.xticks(range(11, 11 + hours_to_watch2))
    else:
        plt.plot(elements, marker='o', c='green')
        plt.xticks(range(hours_to_watch2))
    
    #plt.plot(elements, marker='o',  c='green') 
    #plt.xticks(range(hours_to_watch2))
    plt.title('Predikované hodnoty DST na '+ str(hours_to_watch2)+ "-hodinovom okne", fontsize=25)
    plt.xlabel("Časový priebeh (h)",fontsize=20)
    plt.ylabel("DST", fontsize=20)
    plt.tick_params(axis='x', labelsize=20)
    plt.grid(which='minor', linestyle=':', color='black', linewidth='0.5')
    plt.grid(which='major', linestyle=':', color='black', linewidth='0.5')
    
    
    with output_container2:
        clear_output(wait=True)
        display(fig4)
        display(fig3)

generate_button1.on_click(on_generate_button_clicked1)
generate_button2.on_click(on_generate_button_clicked2)

display(dashboard_title, start_date_widget, hours_to_watch_widget,generate_button2, output_container2, index_widget,interval_length_widget,generate_button1,output_container1)
